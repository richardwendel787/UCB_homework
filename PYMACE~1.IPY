{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dependencies and starter code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>x401</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>m601</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Male</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>g791</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen     Sex  Age_months  Weight (g)\n",
       "0     k403     Ramicane    Male          21          16\n",
       "1     s185    Capomulin  Female           3          17\n",
       "2     x401    Capomulin  Female          16          15\n",
       "3     m601    Capomulin    Male          22          17\n",
       "4     g791     Ramicane    Male          11          16"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as st\n",
    "import scipy as sp\n",
    "from scipy.stats import linregress\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata = \"data/Mouse_metadata.csv\"\n",
    "study_results = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata)\n",
    "study_results = pd.read_csv(study_results)\n",
    "\n",
    "mouse_metadata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites\n",
       "0     b128          0                45.0                 0\n",
       "1     f932          0                45.0                 0\n",
       "2     g107          0                45.0                 0\n",
       "3     a457          0                45.0                 0\n",
       "4     c819          0                45.0                 0"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "study_results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine the data into a single dataset\n",
    "combined_data=pd.merge(mouse_metadata,study_results,how=\"left\",on=\"Mouse ID\")\n",
    "combined_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Mice</th>\n",
       "      <th>Number of Drug Regimen Treatments</th>\n",
       "      <th>Number of Time Measurements</th>\n",
       "      <th>Number of Samples</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>249</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Mice  Number of Drug Regimen Treatments  \\\n",
       "0             249                                 10   \n",
       "\n",
       "   Number of Time Measurements  Number of Samples  \n",
       "0                           10                100  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the \n",
    "#tumor volume for each regimen\n",
    "mice = combined_data[\"Mouse ID\"].unique()\n",
    "drugs = combined_data[\"Drug Regimen\"].unique()\n",
    "time = combined_data[\"Timepoint\"].unique()\n",
    "\n",
    "num_mouse = len(mice)\n",
    "num_drugs = len(drugs)\n",
    "num_measurements = len(time)\n",
    "num_samples = num_drugs * num_measurements\n",
    "\n",
    "data_summary = pd.DataFrame({\"Number of Mice\": [num_mouse],\n",
    "                         \"Number of Drug Regimen Treatments\": [num_drugs],\n",
    "                         \"Number of Time Measurements\": [num_measurements],\n",
    "                         \"Number of Samples\": [num_samples]})\n",
    "data_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>StDev</th>\n",
       "      <th>SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Capomulin</td>\n",
       "      <td>40.68</td>\n",
       "      <td>41.56</td>\n",
       "      <td>24.95</td>\n",
       "      <td>4.99</td>\n",
       "      <td>0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ceftamin</td>\n",
       "      <td>52.59</td>\n",
       "      <td>51.78</td>\n",
       "      <td>39.29</td>\n",
       "      <td>6.27</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Infubinol</td>\n",
       "      <td>52.88</td>\n",
       "      <td>51.82</td>\n",
       "      <td>43.13</td>\n",
       "      <td>6.57</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ketapril</td>\n",
       "      <td>55.24</td>\n",
       "      <td>53.70</td>\n",
       "      <td>68.55</td>\n",
       "      <td>8.28</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Naftisol</td>\n",
       "      <td>54.33</td>\n",
       "      <td>52.51</td>\n",
       "      <td>66.17</td>\n",
       "      <td>8.13</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Placebo</td>\n",
       "      <td>54.03</td>\n",
       "      <td>52.29</td>\n",
       "      <td>61.17</td>\n",
       "      <td>7.82</td>\n",
       "      <td>0.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Propriva</td>\n",
       "      <td>52.32</td>\n",
       "      <td>50.85</td>\n",
       "      <td>42.35</td>\n",
       "      <td>6.51</td>\n",
       "      <td>0.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ramicane</td>\n",
       "      <td>40.22</td>\n",
       "      <td>40.67</td>\n",
       "      <td>23.49</td>\n",
       "      <td>4.85</td>\n",
       "      <td>0.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Stelasyn</td>\n",
       "      <td>54.23</td>\n",
       "      <td>52.43</td>\n",
       "      <td>59.45</td>\n",
       "      <td>7.71</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Zoniferol</td>\n",
       "      <td>53.24</td>\n",
       "      <td>51.82</td>\n",
       "      <td>48.53</td>\n",
       "      <td>6.97</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Mean  Median  Variance  StDev   SEM\n",
       "Drug Regimen                                      \n",
       "Capomulin     40.68   41.56     24.95   4.99  0.33\n",
       "Ceftamin      52.59   51.78     39.29   6.27  0.47\n",
       "Infubinol     52.88   51.82     43.13   6.57  0.49\n",
       "Ketapril      55.24   53.70     68.55   8.28  0.60\n",
       "Naftisol      54.33   52.51     66.17   8.13  0.60\n",
       "Placebo       54.03   52.29     61.17   7.82  0.58\n",
       "Propriva      52.32   50.85     42.35   6.51  0.51\n",
       "Ramicane      40.22   40.67     23.49   4.85  0.32\n",
       "Stelasyn      54.23   52.43     59.45   7.71  0.57\n",
       "Zoniferol     53.24   51.82     48.53   6.97  0.52"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_volume = pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).mean()['Tumor Volume (mm3)'],2))\n",
    "mean_volume = mean_volume.rename(columns={\"Tumor Volume (mm3)\":\"Mean\"})\n",
    "\n",
    "median_volume = pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).median()['Tumor Volume (mm3)'],2))\n",
    "median_volume = median_volume.rename(columns={\"Tumor Volume (mm3)\":\"Median\"})\n",
    "\n",
    "variance = pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).var()['Tumor Volume (mm3)'],2))\n",
    "variance = variance.rename(columns={\"Tumor Volume (mm3)\":\"Variance\"})\n",
    "\n",
    "stdev = pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).std()['Tumor Volume (mm3)'],2))\n",
    "stdev = stdev.rename(columns={\"Tumor Volume (mm3)\":\"StDev\"})\n",
    "\n",
    "SEM = pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).sem()['Tumor Volume (mm3)'],2))\n",
    "SEM = SEM.rename(columns={\"Tumor Volume (mm3)\":\"SEM\"})\n",
    "\n",
    "summary_stat = [mean_volume, median_volume, variance, stdev, SEM]\n",
    "summary_stat = pd.concat(summary_stat,axis=1,join='inner')\n",
    "summary_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Capomulin</td>\n",
       "      <td>230.0</td>\n",
       "      <td>40.68</td>\n",
       "      <td>4.99</td>\n",
       "      <td>23.34</td>\n",
       "      <td>37.69</td>\n",
       "      <td>41.56</td>\n",
       "      <td>45.00</td>\n",
       "      <td>48.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ceftamin</td>\n",
       "      <td>178.0</td>\n",
       "      <td>52.59</td>\n",
       "      <td>6.27</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.21</td>\n",
       "      <td>51.78</td>\n",
       "      <td>56.80</td>\n",
       "      <td>68.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Infubinol</td>\n",
       "      <td>178.0</td>\n",
       "      <td>52.88</td>\n",
       "      <td>6.57</td>\n",
       "      <td>36.32</td>\n",
       "      <td>47.31</td>\n",
       "      <td>51.82</td>\n",
       "      <td>57.31</td>\n",
       "      <td>72.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ketapril</td>\n",
       "      <td>188.0</td>\n",
       "      <td>55.24</td>\n",
       "      <td>8.28</td>\n",
       "      <td>45.00</td>\n",
       "      <td>48.23</td>\n",
       "      <td>53.70</td>\n",
       "      <td>60.87</td>\n",
       "      <td>78.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Naftisol</td>\n",
       "      <td>186.0</td>\n",
       "      <td>54.33</td>\n",
       "      <td>8.13</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.29</td>\n",
       "      <td>52.51</td>\n",
       "      <td>59.96</td>\n",
       "      <td>76.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Placebo</td>\n",
       "      <td>181.0</td>\n",
       "      <td>54.03</td>\n",
       "      <td>7.82</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.46</td>\n",
       "      <td>52.29</td>\n",
       "      <td>59.92</td>\n",
       "      <td>73.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Propriva</td>\n",
       "      <td>161.0</td>\n",
       "      <td>52.32</td>\n",
       "      <td>6.51</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.08</td>\n",
       "      <td>50.85</td>\n",
       "      <td>56.18</td>\n",
       "      <td>72.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ramicane</td>\n",
       "      <td>228.0</td>\n",
       "      <td>40.22</td>\n",
       "      <td>4.85</td>\n",
       "      <td>22.05</td>\n",
       "      <td>36.67</td>\n",
       "      <td>40.67</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Stelasyn</td>\n",
       "      <td>181.0</td>\n",
       "      <td>54.23</td>\n",
       "      <td>7.71</td>\n",
       "      <td>45.00</td>\n",
       "      <td>48.05</td>\n",
       "      <td>52.43</td>\n",
       "      <td>58.72</td>\n",
       "      <td>75.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Zoniferol</td>\n",
       "      <td>182.0</td>\n",
       "      <td>53.24</td>\n",
       "      <td>6.97</td>\n",
       "      <td>45.00</td>\n",
       "      <td>47.34</td>\n",
       "      <td>51.82</td>\n",
       "      <td>57.95</td>\n",
       "      <td>73.32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count   mean   std    min    25%    50%    75%    max\n",
       "Drug Regimen                                                       \n",
       "Capomulin     230.0  40.68  4.99  23.34  37.69  41.56  45.00  48.16\n",
       "Ceftamin      178.0  52.59  6.27  45.00  47.21  51.78  56.80  68.92\n",
       "Infubinol     178.0  52.88  6.57  36.32  47.31  51.82  57.31  72.23\n",
       "Ketapril      188.0  55.24  8.28  45.00  48.23  53.70  60.87  78.57\n",
       "Naftisol      186.0  54.33  8.13  45.00  47.29  52.51  59.96  76.67\n",
       "Placebo       181.0  54.03  7.82  45.00  47.46  52.29  59.92  73.21\n",
       "Propriva      161.0  52.32  6.51  45.00  47.08  50.85  56.18  72.46\n",
       "Ramicane      228.0  40.22  4.85  22.05  36.67  40.67  45.00  47.62\n",
       "Stelasyn      181.0  54.23  7.71  45.00  48.05  52.43  58.72  75.12\n",
       "Zoniferol     182.0  53.24  6.97  45.00  47.34  51.82  57.95  73.32"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stat_analysis= pd.DataFrame(round(combined_data.groupby(['Drug Regimen']).describe()['Tumor Volume (mm3)'],2))\n",
    "\n",
    "stat_analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Tumor Volume (mm3)')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pandas\n",
    "treatment_reg = combined_data[\"Drug Regimen\"].value_counts()\n",
    "treatment_bar_graph = treatment_reg.plot(kind=\"bar\", facecolor=\"blue\")\n",
    "\n",
    "plt.title('Tumor Response to Treatment')\n",
    "plt.xlabel('Drug Regimen')\n",
    "plt.ylabel('Tumor Volume (mm3)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pyplot\n",
    "x_axis = np.arange(len(combined_data))\n",
    "tick_locations = [value for value in x_axis]\n",
    "\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.bar(combined_data[\"Drug Regimen\"], x_axis, color='r', alpha=0.5, align=\"center\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pie plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Male</td>\n",
       "      <td>958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Female</td>\n",
       "      <td>935</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Sex\n",
       "Male    958\n",
       "Female  935"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "gender_count = pd.DataFrame(combined_data[\"Sex\"].value_counts())\n",
    "gender_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gender_df = pd.DataFrame({'count':[958, 935]},\n",
    "                   index = ['Male', 'Female'])\n",
    "gender_pie = gender_df.plot.pie(y='count', figsize=(5, 5),autopct=\"%1.1f%%\", shadow=True, startangle=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Owner\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: MatplotlibDeprecationWarning: Non-1D inputs to pie() are currently squeeze()d, but this behavior is deprecated since 3.1 and will be removed in 3.3; pass a 1D array instead.\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x1d66cd5dfc8>,\n",
       "  <matplotlib.patches.Wedge at 0x1d66ceb2588>],\n",
       " [Text(-1.1775773804745815, -0.230892860423667, 'Male'),\n",
       "  Text(1.0794459321016998, 0.21165178872169366, 'Female')],\n",
       " [Text(-0.6869201386101724, -0.13468750191380574, '50.6%'),\n",
       "  Text(0.5887886902372907, 0.11544643021183289, '49.4%')])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "gender_count = pd.DataFrame(combined_data[\"Sex\"].value_counts())\n",
    "labels = [\"Male\", \"Female\"]\n",
    "explode = (0.1,0)\n",
    "plt.pie(gender_count, explode=explode, labels=labels, autopct=\"%1.1f%%\", shadow=True, startangle=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, outliers and boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First create subset of the combined_data dataframe where 'Drug Regimen' is\n",
    "# in [Capomulin, Ramicane, Infubinol, and Ceftamin]\n",
    "\n",
    "# Create list of four drugs to examine\n",
    "four_drug_list = ['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin']\n",
    "\n",
    "# Slice original combined_data dataframe using list of four drugs\n",
    "four_drugs = combined_data[combined_data['Drug Regimen'].isin(four_drug_list)]\n",
    "\n",
    "# View newly created subset dataframe\n",
    "four_drugs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Last_tumor_size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">Capomulin</td>\n",
       "      <td>b128</td>\n",
       "      <td>38.983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>b742</td>\n",
       "      <td>38.940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>f966</td>\n",
       "      <td>30.486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>g288</td>\n",
       "      <td>37.074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>g316</td>\n",
       "      <td>40.159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">Ramicane</td>\n",
       "      <td>s508</td>\n",
       "      <td>30.276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>u196</td>\n",
       "      <td>40.668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>w678</td>\n",
       "      <td>43.166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>y449</td>\n",
       "      <td>44.183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>z578</td>\n",
       "      <td>30.639</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Last_tumor_size\n",
       "Drug Regimen Mouse ID                 \n",
       "Capomulin    b128               38.983\n",
       "             b742               38.940\n",
       "             f966               30.486\n",
       "             g288               37.074\n",
       "             g316               40.159\n",
       "...                                ...\n",
       "Ramicane     s508               30.276\n",
       "             u196               40.668\n",
       "             w678               43.166\n",
       "             y449               44.183\n",
       "             z578               30.639\n",
       "\n",
       "[100 rows x 1 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Then groupby 'Mouse ID' \n",
    "four_last_tumor = four_drugs.groupby(['Drug Regimen','Mouse ID']).agg(\\\n",
    "        # Get the last value of the 'Tumor Volume (mm3)' column using a lambda function selecting the element in -1 position\n",
    "        Last_tumor_size=('Tumor Volume (mm3)',lambda x: x.iloc[-1])).round(3)\n",
    "\n",
    "# View \n",
    "four_last_tumor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ramicane</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>a203</td>\n",
       "      <td>Last_tumor_size</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.973</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>a251</td>\n",
       "      <td>Last_tumor_size</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65.526</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>a275</td>\n",
       "      <td>Last_tumor_size</td>\n",
       "      <td>NaN</td>\n",
       "      <td>62.999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>a411</td>\n",
       "      <td>Last_tumor_size</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>a444</td>\n",
       "      <td>Last_tumor_size</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.048</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug Regimen              Capomulin  Ceftamin  Infubinol  Ramicane\n",
       "Mouse ID                                                          \n",
       "a203     Last_tumor_size        NaN       NaN     67.973       NaN\n",
       "a251     Last_tumor_size        NaN       NaN     65.526       NaN\n",
       "a275     Last_tumor_size        NaN    62.999        NaN       NaN\n",
       "a411     Last_tumor_size        NaN       NaN        NaN    38.408\n",
       "a444     Last_tumor_size        NaN       NaN        NaN    43.048"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reshape dataframe as columns by using unstack\n",
    "four_last_tumor_unstack = four_last_tumor.stack(level=0).unstack(level=0)\n",
    "# View the result\n",
    "four_last_tumor_unstack.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------\n",
      "Capomulin IQR data is:\n",
      "The lower quartile of Capomulin is: 32.38\n",
      "The upper quartile of Capomulin is: 40.16\n",
      "The interquartile range of Capomulin is: 7.78\n",
      "The the median of Capomulin is: 38.12 \n",
      "Values below 20.71 for Capomulin could be outliers.\n",
      "Values above 51.83 for Capomulin could be outliers.\n",
      "--------------------------------------------------------\n",
      "Ramicane IQR data is:\n",
      "The lower quartile of Ramicane is: 31.56\n",
      "The upper quartile of Ramicane is: 40.66\n",
      "The interquartile range of Ramicane is: 9.1\n",
      "The the median of Ramicane is: 36.56 \n",
      "Values below 17.91 for Ramicane could be outliers.\n",
      "Values above 54.31 for Ramicane could be outliers.\n",
      "--------------------------------------------------------\n",
      "Infubinol IQR data is:\n",
      "The lower quartile of Infubinol is: 54.05\n",
      "The upper quartile of Infubinol is: 65.53\n",
      "The interquartile range of Infubinol is: 11.48\n",
      "The the median of Infubinol is: 60.16 \n",
      "Values below 36.83 for Infubinol could be outliers.\n",
      "Values above 82.75 for Infubinol could be outliers.\n",
      "--------------------------------------------------------\n",
      "Ceftamin IQR data is:\n",
      "The lower quartile of Ceftamin is: 48.72\n",
      "The upper quartile of Ceftamin is: 64.3\n",
      "The interquartile range of Ceftamin is: 15.58\n",
      "The the median of Ceftamin is: 59.85 \n",
      "Values below 25.35 for Ceftamin could be outliers.\n",
      "Values above 87.67 for Ceftamin could be outliers.\n",
      "--------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#Calculate the IQR \n",
    "\n",
    "# Set counter to 0 \n",
    "counter = 0\n",
    "\n",
    "# Do quartile calculations for each drug\n",
    "for drug in four_drug_list:\n",
    "    quartiles = four_last_tumor_unstack[drug].quantile([.25,.5,.75]).round(2)\n",
    "    lowerq = quartiles[0.25].round(2)\n",
    "    upperq = quartiles[0.75].round(2)\n",
    "    iqr = round(upperq-lowerq,2)\n",
    "    lower_bound = round(lowerq - (1.5*iqr),2)\n",
    "    upper_bound = round(upperq + (1.5*iqr),2)\n",
    "    \n",
    "    # Check if it is the first time through the for loop, if so then print dividing line at top only\n",
    "    if counter == 0:\n",
    "        print(f\"--------------------------------------------------------\")\n",
    "    print(f\"{drug} IQR data is:\")\n",
    "    print(f\"The lower quartile of {drug} is: {lowerq}\")\n",
    "    print(f\"The upper quartile of {drug} is: {upperq}\")\n",
    "    print(f\"The interquartile range of {drug} is: {iqr}\")\n",
    "    print(f\"The the median of {drug} is: {quartiles[0.5]} \")\n",
    "    print(f\"Values below {lower_bound} for {drug} could be outliers.\")\n",
    "    print(f\"Values above {upper_bound} for {drug} could be outliers.\")\n",
    "    print(f\"--------------------------------------------------------\")\n",
    "    counter += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create list of lists containing each column in table\n",
    "\n",
    "# Create an empty list\n",
    "boxplot_list = []\n",
    "\n",
    "# Iterate through the list of the four drugs names using them to select the same column names\n",
    "# and appending to the boxplot_list\n",
    "for drug in four_drug_list:\n",
    "    boxplot_list.append(list(four_last_tumor_unstack[drug].dropna()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot list of lists using boxplot method\n",
    "fig1, ax = plt.subplots(figsize=(9,7))\n",
    "ax.set_title('Final measured Tumor volume by Drug Regimen')\n",
    "ax.set_xlabel('Drug Regimen')\n",
    "ax.set_ylabel('Tumor Vol (mm3)')\n",
    "ax.boxplot(boxplot_list,notch=0,sym='gD')\n",
    "plt.xticks([1,2,3,4],four_drug_list)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and scatter plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>43.878496</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>37.614948</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>15</td>\n",
       "      <td>38.177232</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>20</td>\n",
       "      <td>36.866876</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mouse ID Drug Regimen     Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "10     s185    Capomulin  Female           3          17          0   \n",
       "11     s185    Capomulin  Female           3          17          5   \n",
       "12     s185    Capomulin  Female           3          17         10   \n",
       "13     s185    Capomulin  Female           3          17         15   \n",
       "14     s185    Capomulin  Female           3          17         20   \n",
       "\n",
       "    Tumor Volume (mm3)  Metastatic Sites  \n",
       "10           45.000000                 0  \n",
       "11           43.878496                 0  \n",
       "12           37.614948                 0  \n",
       "13           38.177232                 0  \n",
       "14           36.866876                 0  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Create dataframe\n",
    "capomulin_data = combined_data.loc[combined_data['Drug Regimen'] == 'Capomulin']\n",
    "\n",
    "# View \n",
    "capomulin_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tumor_Vol_Mean</th>\n",
       "      <th>Tumor_Vol_SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>45.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>44.266</td>\n",
       "      <td>0.449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>43.084</td>\n",
       "      <td>0.703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>42.064</td>\n",
       "      <td>0.839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>40.716</td>\n",
       "      <td>0.910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>39.940</td>\n",
       "      <td>0.882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>38.769</td>\n",
       "      <td>0.934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>37.817</td>\n",
       "      <td>1.052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>36.958</td>\n",
       "      <td>1.224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>36.236</td>\n",
       "      <td>1.224</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Tumor_Vol_Mean  Tumor_Vol_SEM\n",
       "Timepoint                               \n",
       "0                  45.000          0.000\n",
       "5                  44.266          0.449\n",
       "10                 43.084          0.703\n",
       "15                 42.064          0.839\n",
       "20                 40.716          0.910\n",
       "25                 39.940          0.882\n",
       "30                 38.769          0.934\n",
       "35                 37.817          1.052\n",
       "40                 36.958          1.224\n",
       "45                 36.236          1.224"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Groupby timepoint \n",
    "\n",
    "cap_time_tumor = capomulin_data.groupby(['Timepoint']).agg(\\\n",
    "        # Get the mean of the 'Tumor Volume (mm3)' column\\\n",
    "        Tumor_Vol_Mean=('Tumor Volume (mm3)', np.mean),\\\n",
    "        # Get the standard error of measurement (SEM) of the 'Tumor Volume (mm3)' column\\\n",
    "        Tumor_Vol_SEM=('Tumor Volume (mm3)', st.sem)\\\n",
    ").round(3)\n",
    "\n",
    "# View \n",
    "cap_time_tumor.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# get x axis values\n",
    "time_series = list(cap_time_tumor.index.values)\n",
    "\n",
    "# Use errorbar \n",
    "plt.errorbar(\n",
    "    time_series,  # X values\n",
    "    cap_time_tumor['Tumor_Vol_Mean'], # Y values\n",
    "    yerr=cap_time_tumor['Tumor_Vol_SEM'],     # Y-errors\n",
    "    label=\"Time Series of Tumor Volume for Capomulin\",\n",
    "    fmt=\"bs--\", # format line using dashed lines for plot()\n",
    "    linewidth=3  # width of plot line\n",
    "    )\n",
    "# Add the descriptive title\n",
    "plt.title(\"Time Series of Tumor Volume for Capomulin\")\n",
    "plt.xlabel(\"Time (days)\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "\n",
    "# Set limits of x and y\n",
    "plt.xlim(min(time_series)-max(time_series)*0.05, max(time_series)*1.05)\n",
    "plt.ylim(min(cap_time_tumor['Tumor_Vol_Mean'])*0.95, max(cap_time_tumor['Tumor_Vol_Mean'])*1.05)\n",
    "plt.rcParams[\"figure.figsize\"] = [8,7]\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>43.878496</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>37.614948</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>15</td>\n",
       "      <td>38.177232</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>20</td>\n",
       "      <td>36.866876</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mouse ID Drug Regimen     Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "10     s185    Capomulin  Female           3          17          0   \n",
       "11     s185    Capomulin  Female           3          17          5   \n",
       "12     s185    Capomulin  Female           3          17         10   \n",
       "13     s185    Capomulin  Female           3          17         15   \n",
       "14     s185    Capomulin  Female           3          17         20   \n",
       "\n",
       "    Tumor Volume (mm3)  Metastatic Sites  \n",
       "10           45.000000                 0  \n",
       "11           43.878496                 0  \n",
       "12           37.614948                 0  \n",
       "13           38.177232                 0  \n",
       "14           36.866876                 0  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View Capomul\n",
    "capomulin_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse_weight</th>\n",
       "      <th>Tumor_vol_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>41.964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>b742</td>\n",
       "      <td>21</td>\n",
       "      <td>40.084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>f966</td>\n",
       "      <td>17</td>\n",
       "      <td>36.506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>g288</td>\n",
       "      <td>19</td>\n",
       "      <td>41.990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>g316</td>\n",
       "      <td>22</td>\n",
       "      <td>44.613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>i557</td>\n",
       "      <td>24</td>\n",
       "      <td>44.806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>i738</td>\n",
       "      <td>20</td>\n",
       "      <td>39.141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>j119</td>\n",
       "      <td>23</td>\n",
       "      <td>44.465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>j246</td>\n",
       "      <td>21</td>\n",
       "      <td>43.217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>l509</td>\n",
       "      <td>21</td>\n",
       "      <td>44.434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>l897</td>\n",
       "      <td>19</td>\n",
       "      <td>42.507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>m601</td>\n",
       "      <td>17</td>\n",
       "      <td>34.847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>m957</td>\n",
       "      <td>19</td>\n",
       "      <td>39.050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>r157</td>\n",
       "      <td>25</td>\n",
       "      <td>45.799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>r554</td>\n",
       "      <td>17</td>\n",
       "      <td>36.509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>r944</td>\n",
       "      <td>25</td>\n",
       "      <td>43.367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>s185</td>\n",
       "      <td>17</td>\n",
       "      <td>34.559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>s710</td>\n",
       "      <td>23</td>\n",
       "      <td>42.804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>t565</td>\n",
       "      <td>17</td>\n",
       "      <td>39.329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>u364</td>\n",
       "      <td>17</td>\n",
       "      <td>39.887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>v923</td>\n",
       "      <td>21</td>\n",
       "      <td>41.582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>w150</td>\n",
       "      <td>23</td>\n",
       "      <td>41.385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>w914</td>\n",
       "      <td>21</td>\n",
       "      <td>41.352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>x401</td>\n",
       "      <td>15</td>\n",
       "      <td>36.182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>y793</td>\n",
       "      <td>17</td>\n",
       "      <td>38.507</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Mouse_weight  Tumor_vol_mean\n",
       "Mouse ID                              \n",
       "b128                22          41.964\n",
       "b742                21          40.084\n",
       "f966                17          36.506\n",
       "g288                19          41.990\n",
       "g316                22          44.613\n",
       "i557                24          44.806\n",
       "i738                20          39.141\n",
       "j119                23          44.465\n",
       "j246                21          43.217\n",
       "l509                21          44.434\n",
       "l897                19          42.507\n",
       "m601                17          34.847\n",
       "m957                19          39.050\n",
       "r157                25          45.799\n",
       "r554                17          36.509\n",
       "r944                25          43.367\n",
       "s185                17          34.559\n",
       "s710                23          42.804\n",
       "t565                17          39.329\n",
       "u364                17          39.887\n",
       "v923                21          41.582\n",
       "w150                23          41.385\n",
       "w914                21          41.352\n",
       "x401                15          36.182\n",
       "y793                17          38.507"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Groupby Mouse ID using .agg() method and get the weight and mean of tumor volume\n",
    "cap_mouse_id = capomulin_data.groupby(['Mouse ID']).agg(\\\n",
    "        # Get the mean of the 'Tumor Volume (mm3)' column\\\n",
    "        Mouse_weight=('Weight (g)', np.mean),\\\n",
    "        # Get the standard error of measurement (SEM) of the 'Tumor Volume (mm3)' column\\\n",
    "        Tumor_vol_mean=('Tumor Volume (mm3)', np.mean)\\\n",
    ").round(3)\n",
    "cap_mouse_id.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#create a scatter plot\n",
    "plt.scatter(\n",
    "    cap_mouse_id['Mouse_weight'],\n",
    "    cap_mouse_id['Tumor_vol_mean'],\n",
    "    marker='o',\n",
    "    facecolors='red',\n",
    "    edgecolors='black',\n",
    "    s=cap_mouse_id['Tumor_vol_mean'],\n",
    "    alpha=.75)\n",
    "\n",
    "# labels\n",
    "plt.title(\"Mouse weight vs. Avg. Tumor Volume\")\n",
    "plt.xlabel(\"Mouse weight (g)\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation between both factors is 0.84\n"
     ]
    }
   ],
   "source": [
    "# Calculate the correlation coefficient and linear regression \n",
    "correlation = st.pearsonr(cap_mouse_id['Mouse_weight'],cap_mouse_id['Tumor_vol_mean'])\n",
    "print(f\"The correlation between both factors is {round(correlation[0],2)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The r-squared is: 0.8419461020261081\n",
      "The equation of the regression line is: y = 0.95x + 21.55\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# r squared\n",
    "x_values = cap_mouse_id['Mouse_weight']\n",
    "y_values = cap_mouse_id['Tumor_vol_mean']\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "#line_eq \n",
    "line_eq = f'y = {str(round(slope,2))}x + {str(round(intercept,2))}'\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(17,37),fontsize=15,color=\"black\")\n",
    "plt.title(\"Mouse weight vs. Avg. Tumor Volume\")\n",
    "plt.xlabel(\"Mouse weight (g)\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "print(f\"The equation of the regression line is: {line_eq}\")\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
